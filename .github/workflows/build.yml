name: Build 

on:
  pull_request:
  push:
  release:
    types:
      - created

env:
  BUILD_TYPE: Release

jobs:
  build:
    env:
      VCPKG_ROOT: '${{ github.workspace }}/vcpkg'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        os: [windows-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Setup windows flags
      if: contains(matrix.os, 'windows') && matrix.build_type == 'Release'
      id: flags
      run: echo "::set-output name=SETUP_PY_FLAGS::-G 'Visual Studio 16 2019'"

    - name: install opencv
      run: choco install opencv

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      
      working-directory: ${{runner.workspace}}/build
      run: cmake ${{ github.workspace }} -DBUILD_DEPTHAI=On -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=install_root -DOpenCV_DIR=C:\tools\opencv\build\x64\vc15\lib ${{matrix.config_flags}}

    - name: Build & Install
      working-directory: ${{runner.workspace}}/build
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config Release -v --target install

    - name: Set bundle name
      id: bundle
      run: echo "::set-output name=BUNDLE_FILE_NAME::depthai-tof-demo-$(git describe --tags --always)-${{ matrix.os }}.zip"

    - name: Bundle
      if: matrix.build_type == 'Release'
      working-directory: ${{runner.workspace}}/depthai-tof-demo
      run: 7z a ${{runner.workspace}}/build/${{ steps.bundle.outputs.BUNDLE_FILE_NAME }} ${{runner.workspace}}/build/install_root/*

    - uses: actions/upload-artifact@v2
      name: Upload
      if: matrix.build_type == 'Release'
      with:
        name: depthai-tof-demo-${{ matrix.os }}-${{ matrix.build_type }}
        path: | 
          ${{runner.workspace}}/build/${{steps.bundle.outputs.BUNDLE_FILE_NAME}}
          ${{runner.workspace}}/depthai-tof-demo/dist/*.whl
    - name: Get release
      id: get_release
      if: github.event_name == 'release'
      uses: bruceadams/get-release@v1.2.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      id: upload-release-asset
      continue-on-error: true
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{runner.workspace}}/build/${{steps.bundle.outputs.BUNDLE_FILE_NAME}}
        asset_name: ${{steps.bundle.outputs.BUNDLE_FILE_NAME}}
        asset_content_type: application/zip
